/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ragialdesktopalarm.Forms;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ragialdesktopalarm.Parsing.ParseCharacterURL;
import ragialdesktopalarm.Parsing.ParseVendingItems;
import ragialdesktopalarm.ROItems;
/**
 *
 * @author jko
 */
public class AlarmForm extends javax.swing.JFrame {
    
    private Boolean isAlarmSet = false;
    private int previousItemCount; 
    private Timer timer;
    public static ROItems currentItems;
    /**
     * Creates new form AlarmForm
     */
    public AlarmForm() {
        initComponents();
        initServerChoice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAlarmBtn = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        retrieveBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        serverChoice = new java.awt.Choice();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(507, 330));
        setResizable(false);
        setSize(new java.awt.Dimension(507, 330));
        getContentPane().setLayout(null);

        setAlarmBtn.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        setAlarmBtn.setText("Set Alarm");
        setAlarmBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setAlarmBtnMouseClicked(evt);
            }
        });
        getContentPane().add(setAlarmBtn);
        setAlarmBtn.setBounds(378, 20, 106, 30);

        jLabel1.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        jLabel1.setText("Name:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(22, 21, 63, 25);

        searchField.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        getContentPane().add(searchField);
        searchField.setBounds(110, 20, 150, 28);

        retrieveBtn.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        retrieveBtn.setText("Retrieve");
        retrieveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retrieveBtnMouseClicked(evt);
            }
        });
        getContentPane().add(retrieveBtn);
        retrieveBtn.setBounds(278, 20, 97, 29);

        resultTable.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "price", "amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                resultTableMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resultTableMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(resultTable);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(22, 89, 454, 195);

        serverChoice.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        getContentPane().add(serverChoice);
        serverChoice.setBounds(110, 50, 150, 29);

        jLabel2.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        jLabel2.setText("Server:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(22, 50, 46, 18);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void retrieveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retrieveBtnMouseClicked
        
       if (isAlarmSet){
           JOptionPane.showMessageDialog(null, "Please cancel the alarm before retreiving vending information.", "Alert", JOptionPane.ERROR_MESSAGE);      
           return;
       } 
       ParseCharacterURL url = new ParseCharacterURL();
       ParseVendingItems parse = new ParseVendingItems();
       currentItems = parse.getItemList();
       DefaultTableModel vendingItemsTableModel = (DefaultTableModel) resultTable.getModel();
       vendingItemsTableModel.setRowCount(0);
       
       String[][] rowData = new String[parse.getItemList().getVendingItems().size()][3];

       for(int i = 0 ; i < parse.getItemList().getVendingItems().size(); i++){
           rowData[i][0] = parse.getItemList().getVendingItems().get(i).getName();
           rowData[i][1] = parse.getItemList().getVendingItems().get(i).getPrice();
           rowData[i][2] = parse.getItemList().getVendingItems().get(i).getQuantity();
           vendingItemsTableModel.addRow(rowData[i]);
       }       
    }//GEN-LAST:event_retrieveBtnMouseClicked

    private void setAlarmBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setAlarmBtnMouseClicked
        // TODO add your handling code here:
        timer = new Timer();
        
        if (isAlarmSet){
            int reply = JOptionPane.showConfirmDialog(null, "Cancel current alarm?", "Confirm:", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION){ 
            isAlarmSet = false;
            setAlarmBtn.setText("Set Alarm");
            timer.cancel();
            return;
            }   
        } else {
            int reply = JOptionPane.showConfirmDialog(null, "Set alarm for listed items?", "Confirm:", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION){       
            if ((resultTable.getRowCount() == 0)){
                alertUser("Please retrieve items from a vending merchant!");
                return;
            }
            isAlarmSet = true;
            setAlarmBtn.setText("Alarmed!");
            ParseVendingItems parse = new ParseVendingItems();
            previousItemCount = parse.getItemList().getTotalQuantity();
            
            timer.scheduleAtFixedRate(new TimerTask() {
                int i = 1;
                @Override
                public void run()
                {
                    i++;
                    ParseVendingItems parse = new ParseVendingItems();
                    currentItems = null;
                    currentItems = parse.getItemList();
                    if (previousItemCount != currentItems.getTotalQuantity()){
                        alertUser("Item(s) has been sold!");
                        isAlarmSet = false;
                        setAlarmBtn.setText("Set Alarm");
                        timer.cancel();
                        return;
                    }
                }
            }, 0, 2*60*1000); // every 2 mins
            }
        }

        
    }//GEN-LAST:event_setAlarmBtnMouseClicked

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        // TODO add your handling code here:
        int row = resultTable.getSelectedRow();
        String value = resultTable.getModel().getValueAt(row, 0).toString();
        PreviewForm.getObj(value).setVisible(true);
        //new PreviewForm(value).setVisible(true);
        
    }//GEN-LAST:event_resultTableMouseClicked

    private void resultTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseEntered
        // TODO add your handling code here:
        System.out.println(resultTable.getSelectedRow());
    }//GEN-LAST:event_resultTableMouseEntered

    private void resultTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTableMouseExited
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton retrieveBtn;
    public static javax.swing.JTextField searchField;
    public static java.awt.Choice serverChoice;
    private javax.swing.JToggleButton setAlarmBtn;
    // End of variables declaration//GEN-END:variables

    public static String getDatabaseURL(){
        String url = "http://ropd.info/?name=" + getCharName() + "&" + getServerName();
        return url;
    }

    public static String getCharName(){
        return searchField.getText();
    }

    public static String getServerName(){
        if (serverChoice.getSelectedItem().equals("Classic")){ 
            return "s=6";
        } else {
            return "s=7";
        }
    }
    
    public void alertUser(String s){
        JOptionPane.showMessageDialog(null, s, "Alert", JOptionPane.ERROR_MESSAGE);
    }

    private void initServerChoice() {
        serverChoice.add("Classic");
        serverChoice.add("Renewal");
    }
    
   
}

